// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: serial.proto
// Protobuf Java Version: 4.27.3

package org.overworld.gpio4j.serial;

/**
 * Protobuf enum {@code serial.PinType}
 */
public enum PinType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>DIGITAL_IN = 0;</code>
   */
  DIGITAL_IN(0),
  /**
   * <code>DIGITAL_OUT = 1;</code>
   */
  DIGITAL_OUT(1),
  /**
   * <code>ANALOG_IN = 2;</code>
   */
  ANALOG_IN(2),
  /**
   * <code>ANALOG_OUT = 3;</code>
   */
  ANALOG_OUT(3),
  /**
   * <code>COSINE = 4;</code>
   */
  COSINE(4),
  /**
   * <code>BUFFER = 5;</code>
   */
  BUFFER(5),
  /**
   * <code>PWM = 6;</code>
   */
  PWM(6),
  UNRECOGNIZED(-1),
  ;

  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 27,
      /* patch= */ 3,
      /* suffix= */ "",
      PinType.class.getName());
  }
  /**
   * <code>DIGITAL_IN = 0;</code>
   */
  public static final int DIGITAL_IN_VALUE = 0;
  /**
   * <code>DIGITAL_OUT = 1;</code>
   */
  public static final int DIGITAL_OUT_VALUE = 1;
  /**
   * <code>ANALOG_IN = 2;</code>
   */
  public static final int ANALOG_IN_VALUE = 2;
  /**
   * <code>ANALOG_OUT = 3;</code>
   */
  public static final int ANALOG_OUT_VALUE = 3;
  /**
   * <code>COSINE = 4;</code>
   */
  public static final int COSINE_VALUE = 4;
  /**
   * <code>BUFFER = 5;</code>
   */
  public static final int BUFFER_VALUE = 5;
  /**
   * <code>PWM = 6;</code>
   */
  public static final int PWM_VALUE = 6;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static PinType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static PinType forNumber(int value) {
    switch (value) {
      case 0: return DIGITAL_IN;
      case 1: return DIGITAL_OUT;
      case 2: return ANALOG_IN;
      case 3: return ANALOG_OUT;
      case 4: return COSINE;
      case 5: return BUFFER;
      case 6: return PWM;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<PinType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      PinType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<PinType>() {
          public PinType findValueByNumber(int number) {
            return PinType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return org.overworld.gpio4j.serial.SerialProtos.getDescriptor().getEnumTypes().get(0);
  }

  private static final PinType[] VALUES = values();

  public static PinType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private PinType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:serial.PinType)
}

